[{"content":"#duplicate_logging_cover.png\nOn a recent project we encountered duplicate logging in Azure Application insights.\nüòé Sensitive information in the screenshots is blurred for obvious reasons. Problem introduction scope, and context As seen in the screenshot we suffered in the acceptance environment with duplicate exceptions, information, and dependencies. In the development environment, on the left screen, we did not experience this issue. Plan to solve To exclude the possibility of a software error we mitigated these assumptions:\nDebugging the application and looking at the outgoing application insights tab. The Azure webapp / Azure function is misconfigured. We tested web apps with a single instance. If a single instance generates duplicate logging, it\u0026rsquo;s surely not the instance count. The cause The Log Analytics Workspace was configured in diagnostic settings as well it was in the properties of the Application Insights. See the screenshots of the Azure portal. The actual root cause\nSo when we concluded the configuration was duplicate, we asked ourselves: Why was it duplicate configured, couldn\u0026rsquo;t that have been spotted in an existing ARM template?\nThe answer consists of multiple factors and solutions. The two main components were an ARM-template and an Azure Policy.\n1. The correct way - ARM \u0026gt; Workspace property For the, in my opinion correct, implementation of the properties it was filled by an ARM-template. The infrastructure as code makes sure we\u0026rsquo;re configuring the right Log Analytics Workspace.\n1 2 3 4 5 6 7 8 9 10 11 12 { \u0026#34;type\u0026#34;: \u0026#34;microsoft.insights/components\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;other\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;ai-[YOUR-APPLICATION-INSIGHTS-NAME]\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2020-02-02-preview\u0026#34;, \u0026#34;location\u0026#34;: \u0026#34;West Europe\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;Application_Type\u0026#34;: \u0026#34;web\u0026#34;, \u0026#34;ApplicationId\u0026#34;: \u0026#34;ai-[YOUR-APPLICATION-INSIGHTS-NAME]\u0026#34;, \u0026#34;WorkspaceResourceId\u0026#34;: \u0026#34;law-[YOUR-LOG-ANALYTICS-WORKSPACE-NAME]\u0026#34; } } üí° The naming of Azure resources is done using the Azure abbreviations guide. 2. Azure Policy was enforced on \u0026lsquo;Diagnostic settings\u0026rsquo; There also was an Azure policy checking that there was a diagnostic setting for sending data to the Log Analytics Workspace. Whenever the IT operations checked and enforced the Azure Policy, we would have duplicated the upstream to our Log Analytics Workspace.\nConclusion Difference Application Insights and Log Analytics workspace graph TD AI1[Application Insights instance 1] AI2[Application Insights instance 2] LA1[Log Analytics Workspace] LA1 \u003c--- AI1 LA1 \u003c--- AI2 Application Insights gives \u0026lsquo;insights\u0026rsquo; into application logging, exceptions, and such. You can use the Kudo query language to fetch data intelligently from Application Insights. The Log Analytics workspace is a set of tables. For the client in this article, the data of the Application insights was forwarded to the Log Analytics workspace. The advantage of the Log Analytics workspace is to query over multiple Application insights as well as data about other resources in azure, such as API management, application gateways, service busses, or firewalls.\nIn the screenshot below is seen that when you create a new Application Insights resource the Log Analytics Workspace is configured automatically. ‚ÑπÔ∏è The Log Analytics workspace is part of the Azure Monitor component in Azure. Cost analysis üí∞ This change saved the client over ‚Ç¨1000 monthly in Azure Log Analytic costs. The euros won\u0026rsquo;t tell you how much of the total it was. After fixing all duplicate configurations, the total costs of the Application Insights resources were reduced by roughly 40-50%. If you also are experiencing this problem, I hope this article helps. Good logging makes all developers happy.\nWrap up Whenever you see duplicate logging in your application insights make sure the configuration is correct. Also, make sure that you\u0026rsquo;re not forcing a policy on the diagnostic settings when you configure it in the properties. Only one upstream to the Log Analytic workspace is required üòâ.\nReferences Microsoft Learn - Application Insights Duplicate Telemetry Converting table ApplicationInsights LogAnalytics Azure Monitor ","permalink":"https://martdegraaf.github.io/posts/duplicate-logging-azure-application-insights/","summary":"Save troubles and money fixing duplicate logging in your Azure Application Insights, and Log Analytics Workspace.","title":"Duplicate Logging Azure Application Insights"},{"content":"Introduction For a recent project, I wanted to add a property to the consuming applications from within my NuGet package. This prevents making a pull request for every consuming application with a .csproj change.\nüìì Please note in this example the NuGet package has the ID: MyProject.ExampleNuGet, so replace that value for your nuget package. The consuming application is MyProject.ConsumingWebApi. NuGet file structure MyProject.ExampleNuGet (Repository level) ‚î£ MyProject.ExampleNuGet ‚îÉ ‚î£ Extensions ‚îÉ ‚îÉ ‚îó MySpecialThing.cs ‚îÉ ‚î£ MyProject.ExampleNuGet.csproj ‚îÉ ‚îó MyProject.ExampleNuGet.props ‚î£ MyProject.ExampleNuGet.sln ‚îó nuget.config MyProject.ExampleNuGet.props The NuGet package has a .props-file to enforce some property\u0026rsquo;s to the consumers.\n1 2 3 4 5 6 7 8 \u0026lt;Project\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;!-- Enable output XML Docs for Swagger. --\u0026gt; \u0026lt;GenerateDocumentationFile\u0026gt;true\u0026lt;/GenerateDocumentationFile\u0026gt; \u0026lt;!-- Disable missing XML comment warnings. --\u0026gt; \u0026lt;NoWarn\u0026gt;$(NoWarn);1591\u0026lt;/NoWarn\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;/Project\u0026gt; MyProject.ExampleNuGet.csproj Important is to set the build action of the MyProject.ExampleNuGet.props file to package it to the build directory. See the example below:\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net6.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Update=\u0026#34;MyProject.ExampleNuGet.props\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;build\u0026#34;\u0026gt; \u0026lt;/None\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; Conclusion When installing this package on for example MyProject.ConsumingWebApi a file is generated in de build folder MyProject.ConsumingWebApi.csproj.nuget.g.targets. This ensures the setting is on when building MyProject.ConsumingWebApi.\nReferences I used the following resources to fix my problem.\nhttps://stackoverflow.com/questions/67263924/create-nuget-containing-shared-project-properties-automatic-references https://learn.microsoft.com/en-us/nuget/concepts/msbuild-props-and-targets#packagereference-projects ","permalink":"https://martdegraaf.github.io/posts/add-properties-for-consuming-apps-to-a-nuget-package/","summary":"This article explains how to add consuming project properties to a NuGet package. Those project properties will be used in the consuming apps.","title":"Add project properties for consuming apps to a NuGet package"},{"content":"Introduction For a recent project, I wanted to test that LogError was called. Consider for example this piece of code below. The catch operation was added to swallow the exception of the delete action. We want to test this behavior, but still would like to know the LogError is being called.\nThe system under test 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public async Task Delete(long sequenceNumber) { _logger.LogInformation(\u0026#34;Deleting `{sequenceNumber}`.\u0026#34;, sequenceNumber); try { await _client.Delete(..); _logger.LogInformation(\u0026#34;Delete completed `{sequenceNumber}`.\u0026#34;, sequenceNumber); } catch (InvalidOperationException ex) when (ex.Message.Equals($\u0026#34;The scheduled message with SequenceNumber = {sequenceNumber} is already being cancelled.\u0026#34;)) { _logger.LogError(ex, \u0026#34;Already cancelled {sequenceNumber}.\u0026#34;, sequenceNumber); } } Verify that LogError is called Have you ever tried to verify your LogError using xUnit? It does not seem to work out of the box as other FakeItEasy. I tried this code for example, but it just would not work. The mock that throws the exception has been left out to keep the code sample small.\n1 2 3 4 5 6 7 8 9 10 //Arrange var logger = A.Fake\u0026lt;ILogger\u0026lt;SystemUnderTest\u0026gt;\u0026gt;(); var sut = new SystemUnderTest(logger); //Act await sut.Delete(1); //Assert A.CallTo(() =\u0026gt; logger.LogError(A\u0026lt;string\u0026gt;.Ignored, A\u0026lt;object[]\u0026gt;.Ignored)) .MustHaveHappenedOnceExactly(); The LoggerExtensions class The solution was right at hand because my coworker had already figured it out. Thanks Marnix. Chekout his blog: Marnix\u0026rsquo; blog. Use the extension class as described below.\n1 2 3 4 5 6 7 8 9 10 //Arrange var logger = A.Fake\u0026lt;ILogger\u0026lt;SystemUnderTest\u0026gt;\u0026gt;(); var sut = new SystemUnderTest(logger); //Act await sut.Delete(1); //Assert logger.VerifyLogged(LogLevel.Information, \u0026#34;Deleting 1\u0026#34;); logger.VerifyLogged(LogLevel.Error, \u0026#34;Already cancelled 1\u0026#34;); LoggerExtensions.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 using FakeItEasy; using Microsoft.Extensions.Logging; using System; using System.Linq; using Xunit.Sdk; namespace SomeCoolNamespace; public static class LoggerExtensions { public static void VerifyLogged\u0026lt;T\u0026gt;(this ILogger\u0026lt;T\u0026gt; logger, LogLevel level, string logMessage) { var (found, actualLevel, actualMessage) = logger.VerifyLog(logMessage); if (!found) { throw new XunitException($\u0026#34;No log message found containing \u0026#39;{logMessage}\u0026#39; at any loglevel\u0026#34;); } if (actualLevel != level) { throw new AssertActualExpectedException( $\u0026#34;[{level}] {logMessage}\u0026#34;, $\u0026#34;[{actualLevel}] {actualMessage}\u0026#34;, $\u0026#34;Unexpected log level for log message\u0026#34;); } } public static void VerifyNotLogged\u0026lt;T\u0026gt;(this ILogger\u0026lt;T\u0026gt; logger, LogLevel level, string logMessage) { var (found, actualLevel, actualMessage) = logger.VerifyLog(logMessage); if (found \u0026amp;\u0026amp; actualLevel == level) { throw new XunitException( @$\u0026#34;Log message found containing \u0026#39;{logMessage}\u0026#39; at level {level}{Environment.NewLine}Message: {actualMessage}\u0026#34;); } } public static void VerifyNotLoggedAtLevel\u0026lt;T\u0026gt;(this ILogger\u0026lt;T\u0026gt; logger, LogLevel level) { var call = Fake.GetCalls(logger) .FirstOrDefault(call =\u0026gt; (LogLevel?)call.Arguments[0] == level); if (call != null) { throw new XunitException( @$\u0026#34;Log message found at level {level}{Environment.NewLine} Message: {call.Arguments[2]}\u0026#34;); } } public static void VerifyLoggedAtLevel\u0026lt;T\u0026gt;(this ILogger\u0026lt;T\u0026gt; logger, LogLevel level) { var found = Fake.GetCalls(logger) .Any(call =\u0026gt; (LogLevel?)call.Arguments[0] == level); if (found) { throw new XunitException($\u0026#34;No log message found at level {level}\u0026#34;); } } private static (bool found, LogLevel? level, string? message) VerifyLog\u0026lt;T\u0026gt;(this ILogger\u0026lt;T\u0026gt; logger, string message) { var call = Fake.GetCalls(logger) .FirstOrDefault(call =\u0026gt; call.Arguments[2].ToString() .Contains(message, StringComparison.OrdinalIgnoreCase)); return (call != null, (LogLevel?)call?.Arguments[0], call?.Arguments[2].ToString()); } } Conclusion Using this class you will be able to test your logging with Xunit and FakeItEasy.\n","permalink":"https://martdegraaf.github.io/posts/verifylogged-with-xunit/","summary":"Explains how to test LogError with Xunit.","title":"How to verify that ILogger actually logged an error?"},{"content":" Mart de Graaf is a hardworking software geek sharing his ideas, solutions, and hobbies. He is enthusiastic about .NET solutions, Azure DevOps, and Azure solutions. Mart is working for 4Dotnet, a consulting company in the Netherlands. At home, he is a father to his four children.\nCarreer I am still very proud of the achievements I set in my previous clients. Together with my dad, we started a new concept in interactive video. See an example below:\nMy full career path with clients and employees is available on LinkedIn.\n","permalink":"https://martdegraaf.github.io/about/","summary":"Mart de Graaf is a hardworking software geek sharing his ideas, solutions, and hobbies. He is enthusiastic about .NET solutions, Azure DevOps, and Azure solutions. Mart is working for 4Dotnet, a consulting company in the Netherlands. At home, he is a father to his four children.\nCarreer I am still very proud of the achievements I set in my previous clients. Together with my dad, we started a new concept in interactive video.","title":"About Mart"}]