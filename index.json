[{"content":"We want to spend time on the most important things right? Are you also annoyed by the number of emails generated by Azure DevOps? See how I fixed the email overdose using an Outlook rule.\nE-mail headers To remove all emails would be nice, but we won\u0026rsquo;t see any mentions. To know how to recognize a mention email I opened a mention email. I found the headers by clicking the three dots in the Outlook web version. And then Open the \u0026lsquo;View\u0026rsquo; dropdown and select \u0026lsquo;View message details\u0026rsquo;.\nWe see that some headers indicate that the message trigger contained \u0026lsquo;Mention\u0026rsquo;. This is essential information for our next steps. Here below the headers I found in the email message.\n1 2 3 4 5 6 X-VSS-Scope: organisation/project/Repository X-VSS-Event-Type: ms.vss-mentions.identity-mention-event X-VSS-Subscription-ID: ms.vss-mentions.identity-mention-subscription X-VSS-Event-Initiator: Mart de Graaf X-VSS-Event-Initiator-Ascii: Mart de Graaf X-VSS-Event-Trigger: Mention Outlook Rules I am not praising the Outlook client, I want to talk about the Rules feature of Outlook. The rules are found in the classic Outlook by pressing \u0026lsquo;File\u0026rsquo; and then clicking the big \u0026lsquo;Manage Rules \u0026amp; Alerts\u0026rsquo; button. Let\u0026rsquo;s create a rule to delete and mark all those emails as read.\nThe first step is to define conditions. We know Azure DevOps emails from azuredevops@microsoft.com. For my case, I wanted to scope emails to a certain organization, which can be done by filtering specific words in the message header. The emails should be deleted, but also be marked as read. Nothing is more annoying than a number after your delete folder, right? We still would like to receive the Mention emails. So we need to make an exception for them. As said earlier this can be done by filtering the message header for specific words. Full Outlook Rule The only thing you have to edit in my example is the organisationName.\n1 2 3 4 5 from azuredevops@microsoft.com and with VSS-Scope: organisationName delete it and mark it as read except if the message header contains \u0026#39;X-VSS-Event-Trigger: Mention\u0026#39; or \u0026#39;X-VSS-Subscription-ID: ms.vss-mentions.identity-mention-subscription\u0026#39; 📣 Have any suggestions, I would love to hear them! Conclusion and discussion Help yourself keep control of your inbox. I think you should work from the board and business wishes, and not from your inbox.\n","permalink":"https://martdegraaf.github.io/posts/consulting/filter-devops-mentions-in-outlook/","summary":"Are you also annoyed by the number of emails generated by Azure DevOps? Learn how I fixed email overdose using an Outlook rule.","title":"Efficiently use Outlook Rules to Delete Azure DevOps Email Clutter"},{"content":"As a consultant, starting a new project with a client can be a daunting task. One way to make the transition smoother is by cloning all the repositories on your first day. This allows you to have quick access to all the necessary files and resources, enabling you to perform your job efficiently and effectively. In this blog post, we will explore the benefits of cloning repositories, a script for doing so, and some common pitfalls to avoid.\nSkip to the code sample\nOrganizing your Git repos When working for multiple clients or even just having private projects next to your client projects it can come in handy to organize your git repositories. For some Frontend repositories, the path with node_modules was too long and that forced me to place my folders on the Disk level. A path for a project for me would look like C:\\Git\\{ClientName}\\{RepositoryName}.\n1 2 3 4 5 6 7 8 9 10 11 C:\\Git ┣ Client1 ┃ ┣ Client1.Repository1 ┃ ┣ Client1.Repository2 ┃ ┗ Client1.Repository3 ┣ Client2 ┃ ┣ Client2.Repository1 ┃ ┗ Client2.Repository2 ┗ private ┃ ┣ Blog ┃ ┗ Demo Using workspaces in Git Fork Fork is a tool that will help you focus on the right workload. Using the structure as discussed with Fork, you can focus on the right repositories. Cloned new repositories but not seen by Fork? Reload the whole folder using right-click and \u0026lsquo;Rescan repositories\u0026rsquo;. Get Git Fork from git-fork.com.\nUse Fork Workspaces to focus on the current environment. It will also help you work on private projects outside of work hours on the same workstation. You can also create workspaces for different domains or teams if you are for example the lead or architect in a project.\nConfigure your git username Depending on the network infra, you will need to configure your commit username to the email of your client. Some instances block all git pushes from committers with a different domain.\n1 git config [--global] user.email \u0026#34;username@corperate.com\u0026#34; In the script to clone all repositories, you can also enable the script to set the committer email for every repository.\nClone all repositories To clone all repositories in Azure DevOps we can use the REST API to find all existing repositories. The code example consists of a Powershell script and a configuration file with settings and Authorization.\nConfiguration Make sure to create a file named: CloneAllRepos.config with the contents written below. Make sure every parameter is configured as your workspace.\n1 2 3 4 5 6 7 8 9 10 11 12 [General] Url=https://dev.azure.com/MART/project Username=me@example.com Password= ## Use Azure Devops to generate a Personal Access Token with rights: Code: Read/Write, and Packaging: Read# [LocalGitConfig] GitPath=C:\\Git\\ OrgName=MART [GitOptions] PruneLocalBranches=false # Optional defaults to false GitEmail=username@corperate.com 💡 Don\u0026rsquo;t know where to find a Personal Access Token in Azure DevOps? Read: Microsoft\u0026rsquo;s docs on personal access tokens. CloneAllRepos.ps1 When I first encountered the idea to clone all repos idea it was on a corporate wiki. After some backtracing, I found the source: Script to clone all Git repositories from your Azure DevOps collection.\nThe PowerShell script below does a git pull for existing repositories and performs a git clone on untracked repositories.\nI edited the script to fit my needs with some extra parameters.\nIt puts the repos in the given directory in settings. It prunes local branches when PruneLocalBranches is set to true. It sets the git username email to the configured GitUsername under GitOptions, it\u0026rsquo;s ignored when empty. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 # Read configuration file Get-Content \u0026#34;CloneAllRepos.config\u0026#34; | foreach-object -begin {$h=@{}} -process { $k = [regex]::split($_,\u0026#39;=\u0026#39;); if(($k[0].CompareTo(\u0026#34;\u0026#34;) -ne 0) -and ($k[0].StartsWith(\u0026#34;[\u0026#34;) -ne $True)) { $h.Add($k[0], $k[1]) } } #AzDO config $url = $h.Get_Item(\u0026#34;Url\u0026#34;) $username = $h.Get_Item(\u0026#34;Username\u0026#34;) $password = $h.Get_Item(\u0026#34;Password\u0026#34;) # LocalGitConfig $gitPath = $h.Get_Item(\u0026#34;GitPath\u0026#34;) $orgName = $h.Get_Item(\u0026#34;OrgName\u0026#34;) $pruneLocalBranches = $h.Get_Item(\u0026#34;PruneLocalBranches\u0026#34;) -eq \u0026#34;true\u0026#34; $gitEmail = $h.Get_Item(\u0026#34;GitEmail\u0026#34;) # Retrieve list of all repositories $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes((\u0026#34;{0}:{1}\u0026#34; -f $username,$password))) $headers = @{ \u0026#34;Authorization\u0026#34; = (\u0026#34;Basic {0}\u0026#34; -f $base64AuthInfo) \u0026#34;Accept\u0026#34; = \u0026#34;application/json\u0026#34; } Add-Type -AssemblyName System.Web $gitcred = (\u0026#34;{0}:{1}\u0026#34; -f [System.Web.HttpUtility]::UrlEncode($username),$password) $resp = Invoke-WebRequest -Headers $headers -Uri (\u0026#34;{0}/_apis/git/repositories?api-version=1.0\u0026#34; -f $url) $json = convertFrom-JSON $resp.Content # Clone or pull all repositories $initpath = (\u0026#34;{0}:{1}\u0026#34; -f $gitPath,$orgName) foreach ($entry in $json.value) { set-location $initpath $name = $entry.name Write-Host $name -ForegroundColor Green if($entry.isDisabled){ Write-Host \u0026#34;Skipping disabled repo: \u0026#39;$name\u0026#39;\u0026#34; -ForegroundColor Yellow continue; } $url = $entry.remoteUrl #-replace \u0026#34;://\u0026#34;, (\u0026#34;://{0}@\u0026#34; -f $gitcred) if(!(Test-Path -Path $name)) { git clone $url } else { Write-Host \u0026#34;Directory \u0026#39;$name\u0026#39; exists lets pull\u0026#34; set-location $name git pull $defaultBranch = git symbolic-ref --short HEAD if($pruneLocalBranches){ Write-Host \u0026#34;Pruning local branches $name\u0026#34; -ForegroundColor Yellow $branches = git branch -vv | Where-Object { $_ -notmatch \u0026#34;::\u0026#34; } | ForEach-Object { ($_ -split \u0026#39;\\s+\u0026#39;)[1] } foreach ($branch in $branches) { if ($branch -eq $defaultBranch) { Write-Host \u0026#34;Skipping default branch \u0026#39;$branch\u0026#39;.\u0026#34; continue } if ((git branch -vv | Where-Object { $_ -match \u0026#34;$branch\\s+\\[origin\\/\u0026#34; })) { Write-Host \u0026#34;Skipping branch \u0026#39;$branch\u0026#39; as it has a remote reference.\u0026#34; } else { git branch -D $branch Write-Host \u0026#34;Deleted local branch \u0026#39;$branch\u0026#39;.\u0026#34; -ForegroundColor Green } } } if($gitEmail){ git config user.email \u0026#34;$gitEmail\u0026#34; } } } 🤖 If you have some additional ideas, let ChatGPT help you. Supply ChatGPt with the context: Rewrite this PowerShell script to also \u0026lt;insert new Feature\u0026gt;. Here is the current version of the PowerShell script: \u0026lt;insert PowerShell script\u0026gt;.. Let me know if you thought of a clever solution. Run it Run the script it using a PowerShell prompt for example using for example Windows Terminal.\n1 ./CloneAllRepos.ps1 Using scripting for common tasks In the world of microservices, we choose to duplicate some of the plumbing. When you want to change multiple repos knowledge on scripting can be helpful. In this series, I explored how to automate git tasks with PowerShell.\nSome examples are:\nUpdating multiple NuGet packages. Enforcing certain Nuget. config configurations. Renaming business terminology on multiple branches. Automating With this structure, you could automate actions over multiple repositories. In the code below I wrote an example of automating script for changing the Nuget.config file in every repository. If your packages have the same layout changes can be done easier and faster. Also, please check out my article using binary replace.\n1 2 3 4 5 6 7 8 9 10 11 12 git checkout main git pull git checkout -b fix/nugetconfig # DO THE NECESSARY CHANGE in nuget.config. git mv -f NuGet.config nuget.config git add * git commit -m \u0026#34;Only use private Nuget upstream\u0026#34; git push --set-upstream origin fix/nugetconfig git checkout main Conclusion and discussion Make your workflow faster with scripting and your knowledge of the Git CLI. When you have to do repetitive tasks such as updating a single package on multiple (microservice-like) repositories, try to automate it. It may for the first occurrence not be profitable, but after three times, you will be faster than doing it manually. It can also help you clean up your workspace and be more tidy.\n","permalink":"https://martdegraaf.github.io/posts/consulting/git-clone-all-repos-azure-devops/","summary":"Learn how to efficiently clone all Git repos in Azure DevOps with our comprehensive consulting guide. Streamline your development workflow today!","title":"Efficiently Git Clone All Repositories from Azure DevOps using PowerShell: A Step-by-Step Guide"},{"content":"So a few years ago I worked with Jaap Lamfers. Jaap showed me a tool to easily replace .csproject names and namespaces. This tool is named Bire.\nWhy you should care Renaming files is hard. When renaming Projects in Visual Studio the Folder does not change and keeps its original name. The project path is declared in the Solution file (.sln). Not a problem when working in Visual Studio, but a minor annoyance when reviewing a pull request.\nAlso when renaming projects via Visual Studio, not all namespaces will change as well. And when renaming manually you need to change the references as well in the contents of the .csproject file.\nBire Jaap encountered a problem where with microservices he needed to build and the namespaces could be changed afterward. The company used abbreviations for services, with bire he just could build and change the name afterward with a single command.\nThe tool of Jaap is available at Github jlamfers/bire.\nI thought his tool was brilliant, but it missed the crucial documentation to make it understandable for the whole company.\n🍺 Bire is pronounced as the Dutch word \u0026lsquo;Bier\u0026rsquo;. Bier is Dutch for beer. BiRe is an abbreviation for \u0026lsquo;binary replace\u0026rsquo;. Using Bire bire -from C:\\git\\source -to C:\\git\\target -replace this=that Something=Anything\nThis is an example I wrote in the Readme file. But I want to give you a more concrete example let\u0026rsquo;s imagine this folder structure. The project is in C:\\git\\MyCoolProject\\source.\nsource ┣ MyCoolProject.DataAccess ┃ ┣ .... ┣ MyCoolProject.DataModels ┃ ┣ .... ┣ MyCoolProject.Business ┃ ┣ .... ┣ MyCoolProject.WebApi ┃ ┣ .... ┣ MyCoolProject.Functions ┃ ┣ .... ┣ MyCoolProject.slnLet\u0026rsquo;s say we don\u0026rsquo;t like MyCoolProject anymore and we want to rename it to MCP.\nThen we can use Bire. Download the bire.exe from my GitHub release 1.\nUse the following command to get MyCoolProject abbreviated to MCP.\nbire -from C:\\git\\MyCoolProject\\source -replace MyCoolProject=MCP We\u0026rsquo;re not copying the project we don\u0026rsquo;t need the -to param. You should have your repo in git to do this change safely right?\nIgnoring the right files and file types What if we would have certain files that would refer to MyCoolProject and we want them to stay that way instead of renaming MyCoolProject to MCP. For example a MyCoolProjectClient.cs class.\nbire -from C:\\git\\MyCoolProject\\source -replace MyCoolProject=MCP -ignore \u0026#34;MyCoolProjectClient.cs|(.*(\\.|\\/|\\\\)(exe|dll|obj|bin|pdb|zip|\\.git|\\.vs|cache|packages))$\u0026#34;Conclusion Bire helped me a lot at some companies. Let tools help you and get grip on your time back. Let it be another tool in your toolbox. Let me know if you have used bire and liked it.\n","permalink":"https://martdegraaf.github.io/posts/replacing-your-projects-and-namespaces-using-bire/","summary":"We all sometimes want to rename projects and or namespaces but VS makes it hard, why can\u0026rsquo;t we just take one command to replace all? We can with bire.","title":"Replacing Your Projects and Namespaces Using Bire"},{"content":"TL;DR Just start your creating your first page if you want to blog. Come back if you need motivation, then go back to writing/typing.\nBlog in an hour My coworker said to me; \u0026ldquo;In the past time there was someone who did the things I dreamed of in just 4 days.\u0026rdquo;. The person he referred to was me. He praised me for my dedication and courage to go fast and agile. I went fast to production with my blog and iterated new articles and new features. My coworker planned things out like the theme. When he was not fully satisfied with his theme he chose another theme but still had no active blog post. This blog is written to help others to get started. So beat your excuses and start today.\nFocus on your first post To break the chicken-egg problem, the focus for starting your blog should be creating the first post. If there is no content why should you make a blog? If there is no blog why should you make content? Break through the cycle and start creating your first article.\nEat that frog \u0026lsquo;Eat that frog\u0026rsquo; states that you should prioritize your tasks, and do the thing with the most impact first. You should be acting like there is no tomorrow and start working on your blog today, except when you don\u0026rsquo;t want a blog. If you do not want a blog then why are you reading this article, are you procrastinating other tasks?\nSee your first article or blog post as the first checkpoint of your blogging world. From there you can check off multiple other checkpoints.\nTo read more about why you should do this now and not later, read my Book review on Eat that frog.\nOne-time setup I recommend using a blog builder that uses git versioning like Hugo. Hugo can be easily deployed. This blog runs on Azure Static Webapps and GitHub Pages. Other alternatives like Wix or WordPress will be more painful to maintain.\nJust because this blog iterated to Azure Static Webapps, didn\u0026rsquo;t stop me from producing the actual blog content. The blog content is the most valuable. It\u0026rsquo;s the core reason for your blog to exist. People are coming to read what you have written not for your cool styling.\nTo make it agile I have made these acceptance criteria for your blog.\nYour blog has to be accessible through the browser. Your blog has at least one article. That means that these things are OUT OF SCOPE for your first production release:\nA custom URL A funky-looking theme A fitting Favicon An about page. Comment section And so much more that gets in your way for your first blog post to be online. Iterating your blog Iterating your blog should be about:\nFinetuning your blogging workflow. Styling your blog. Refactoring your content. Learning about the blogging framework. Be fearless, when using Hugo and git you have version control to go back to. Just don\u0026rsquo;t commit and push any secrets. Prioritize your blog TODO list Make a list of items you want to blog about. When you get new ideas put them on the list and prioritize them. Start with your first item and focus on it until you finish that blog post!\nSome questions to help you prioritize:\nWhat blog item/subject has the most impact on your career? For example, if you write about a subject you work on daily, you will learn and become better. Another example is: you want to help companies using a certain technology. Writing about a subject helps your branding and the teacher learns the most. What blog item/subject is hardest to solve? What blog item/subject is not yet available easily when you searched for your problem? What blog item/subject gives you the most joy? What story do you tell about what you do for a living? What do colleagues admire about you? Use a mindmap to organize your ideas The mermaid JavaScript plugin builds some cool diagrams. Get started with your mindmap for blogging subjects right now with the Mermaid Live Editor. Below is an example mindmap of my blogging subjects.\nmindmap root)Blog mindmap( T[Testing] Playwright Builder pattern UI scraping LaC((Life as\u0026lt;br\u0026gt;consultant)) C[Clone and go] Clone script Git folder structure Personal development planinng Client conventions Clear all traces A[Azure] Application insights BA[Blogging Agile] Getting started Template Conclusion When starting your blog, focus on your content first. That\u0026rsquo;s the thing that will be truly yours. Keep an eye out for more content about blogging agile.\n","permalink":"https://martdegraaf.github.io/posts/blogging-agile/start-blogging-today/","summary":"How to start with your blog. The main focus should be content, starting and moving forward.","title":"Beat your excuses and start blogging"},{"content":"This year I read and listened to \u0026lsquo;Eat that frog!\u0026rsquo; by Brian Tracy. I tried to apply these principles to my daily life.\n💡 This article will be updated when I find new takeaways. Summary Eat that frog is a practical book on how to \u0026ldquo;get more of the important things done today\u0026rdquo;. It focuses on doing key tasks first and procrastinating the unimportant tasks.\nThe author gives 21 principles for getting more things done faster:\nSet the table (spend some time writing out your goals for year, month, and week). Prioritize those and concentrate on the most important ones. Plan every day in advance (on paper). Apply the 80/20 rule to everything: 20% of your work will constitute 80% of your achievements. Concentrate on that 20%. Consider the consequences of what you choose to work on. Focus on these above all else. Practice creative procrastination. You\u0026rsquo;re not going to be able to get everything done so put off the less important tasks. Use the ABCDE method. Organize your tasks by value (a,b,c\u0026hellip;) and priority (1,2,3\u0026hellip;). Focus on key result areas. Obey the law of three. Identify the three things you do in work that account for 90% of your contribution. Prepare thoroughly before you begin. The 6Ps: Proper Prior Planning Prevents Poor Performance. Take it one barrel at a time. That way you can make it through the desert. Upgrade your key skills! Identify your key constraints. Put pressure on yourself. Motivate yourself into action (be your own cheerleader). technology is a terrible master. Take back time your time from tech addictions. Learn to turn off devices and notifications and keep them off. Technology is a wonderful servant. Use technological tools to confront yourself with what is most important. Focus your attention Slice and dice your tasks. Break your tasks into smaller, more manageable chunks. Create large blocks of time to get your work done. Develop a sense of urgency. Single-handle every task. Comparing Agile and the lecture in Eat that frog I see many aspects that are similar in working Agile as what is stated in \u0026lsquo;Eat that frog\u0026rsquo;. For example:\n(6) Use the ABCDE Method Continually (The Product owner should keep the backlog up to date) (7) Focus on key result areas (The work in the sprint) (9) Prepare thoroughly before you begin (refinements) (18) Slice and Dice the Tasks (The division of Epic Feature and Product backlog, and task level) (20) Develop a sense of urgency (The sprint is time-boxed) Lessons learned as a developer Think about your daily, weekly, monthly, and long-term goals. Make sure you check your daily goals with your long-term goals. I did write down my long-term goals on paper and am trying to work with daily TODO lists.\n💬 \u0026ldquo;Find out what successful people do, and do the same things until you get results.\u0026rdquo;\nQuote from the book\nExample long-term goals I am certified in security in 2023. I am speaking on stage as a public speaker in 2023. I am 90kg or less in November 2023. Important is to write your goals in the present tense, positive voice, and in the first person singular. This way your mind will accept it as a clear goal.\nFor each of these goals, create a list of work you have to do to achieve your goal. When you break down your goal into tasks it will be easier to do.\nI did this for example for my speaking goals. The Gantt chart below was my plan for 2022. The main goal was to be prepared for DevNetNoord, a Dutch tech event. When I determined my goal I placed tasks that could help me prepare for this event, such as training or smaller sessions. To be transparent to my client I included the sprints, that way I can easily communicate when I am busy.\ngantt title Marts Speaking path dateFormat YYYY-MM-DD section Private Holidays :v1, 2022-08-08, 3w section Client sprints Sprint 14 :s14, 2022-07-11, 2w Sprint 15 :s15, after s14, 2w Sprint 16 :s16, after s15, 2w Sprint 17 :s17, after s16, 2w Sprint 18 :s18, after s17, 2w Sprint 19 :s19, after s18, 2w Sprint 20 :s20, after s19, 2w section Other consultancy days Consultancy client 1 : 2022-07-27, 2d Consultancy client 2 : 2022-08-02, 1d section Speaking Training Speaking in public (training) 1 :a1, 2022-09-16, 1d Speaking in public (training) 2 :a1, 2022-09-23, 1d section Events Pizza session 4dotnet Application insights : milestone, m1, 2022-06-02, 2min Pizza session 4dotnet Advanced Git : milestone, m1, 2022-09-02, 2min DevNetNoord : milestone, m1, 2022-09-29, 2min DotNetFriday : milestone, m1, 2022-11-04, 2min Multiple TODO lists Imagine you are in a team using a kanban board, but besides that, you have an on-paper TODO list. That does seem like you are creating a black market of work on paper next to your board of work, right? Some work may be investigating issues to refine for example an upcoming feature. How do you keep your board work and on-paper lists in sync?\nUse procrastination as your friend Some things you rate as unimportant can be procrastinated on. Try to procrastinate the unimportant tasks in your daily work to get the important work and tasks done.\nRecommendations I recommend reading or listening to this book and practicing some of the given habits. One that will highly depend on the individual is: \u0026lsquo;Upgrade your key skills\u0026rsquo;. I think you should be making goals to keep learning next to your daily work. Sometimes even before doing any daily work. The learning will increase your efficiency especially when you focus on a key skill.\nRead Eat that frog Buy the book via Amazon or listen via Spotify:\n","permalink":"https://martdegraaf.github.io/reviews/books/eat-that-frog/","summary":"This year I read and listened to \u0026lsquo;Eat that frog!\u0026rsquo; by Brian Tracy. I tried to apply these principles to my daily life.\n💡 This article will be updated when I find new takeaways. Summary Eat that frog is a practical book on how to \u0026ldquo;get more of the important things done today\u0026rdquo;. It focuses on doing key tasks first and procrastinating the unimportant tasks.\nThe author gives 21 principles for getting more things done faster:","title":"Eat that frog! - Book review by a developer"},{"content":"TL;DR The Application Insights was configured to send the data twice to the Log Analytics workspace. One of them was done by ARM, the other was enforced by an Azure Policy. We turned off the Azure Policy and removed all upstream diagnostics settings on all Application Insights resources. This saved 100 euros montl\nOn a recent project, we encountered duplicate logging in Azure Application insights.\n💡 In the Classic Azure world, Log workspaces were not a thing yet. So when creating new application insights resources you should not encounter this problem. Problem introduction scope, and context As seen in the screenshot we suffered in the acceptance environment with duplicate exceptions, information, and dependencies. In the development environment, on the left screen, we did not experience this issue. 😎 Sensitive information in the screenshots is blurred for obvious reasons. Exclude the software error To exclude the possibility of a software error, we executed these actions:\nDebugging the application and looking at the outgoing application insights tab. The Azure web app / Azure function is misconfigured. We tested web apps with a single instance. If a single instance generates duplicate logging, it\u0026rsquo;s surely not the instance count. The cause The Log Analytics Workspace was configured in diagnostic settings as well it was in the properties of the Application Insights. See the screenshots of the Azure portal. The screenshot below shows how the application insights resource is configured upstream. So when we concluded the configuration was duplicate, we asked ourselves:\nWhy was it duplicate configured, couldn\u0026rsquo;t that have been spotted in an existing ARM template? The answer consists of multiple factors and solutions. The two main components were an ARM template and an Azure Policy. 1. The correct way - ARM \u0026gt; Workspace property The correct implementation of the properties was created by an ARM template. The infrastructure as code makes sure we\u0026rsquo;re configuring the upstream Log Analytics Workspace.\n1 2 3 4 5 6 7 8 9 10 11 12 { \u0026#34;type\u0026#34;: \u0026#34;microsoft.insights/components\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;other\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;ai-[YOUR-APPLICATION-INSIGHTS-NAME]\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2020-02-02-preview\u0026#34;, \u0026#34;location\u0026#34;: \u0026#34;West Europe\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;Application_Type\u0026#34;: \u0026#34;web\u0026#34;, \u0026#34;ApplicationId\u0026#34;: \u0026#34;ai-[YOUR-APPLICATION-INSIGHTS-NAME]\u0026#34;, \u0026#34;WorkspaceResourceId\u0026#34;: \u0026#34;law-[YOUR-LOG-ANALYTICS-WORKSPACE-NAME]\u0026#34; } } 💡 The naming of Azure resources is done using the Azure abbreviations guide. 2. Azure Policy was enforced on \u0026lsquo;Diagnostic settings\u0026rsquo; There also was an Azure policy checking that there was a diagnostic setting for sending data to the Log Analytics Workspace. Whenever the IT operations checked and enforced the Azure Policy, we would have duplicated the upstream to our Log Analytics Workspace.\nWe turned off this Azure Policy and removed all upstream diagnostics settings on all Application Insights resources.\nConclusion Difference Application Insights and Log Analytics workspace graph TD AI1[Application Insights instance 1] AI2[Application Insights instance 2] LA1[Log Analytics Workspace] LA1 \u0026lt;--- AI1 LA1 \u0026lt;--- AI2 Application Insights gives \u0026lsquo;insights\u0026rsquo; into application logging, exceptions, and such. You can use the Kudo query language to fetch data intelligently from Application Insights. The Log Analytics workspace is a set of tables. For the client in this article, the data of the Application insights was forwarded to the Log Analytics workspace. The advantage of the Log Analytics workspace is to query over multiple Application insights as well as data about other resources in azure, such as API management, application gateways, service busses, or firewalls.\nIn the screenshot below is seen that when you create a new Application Insights resource the Log Analytics Workspace is configured automatically. ℹ️ The Log Analytics workspace is part of the Azure Monitor component in Azure. Cost analysis 💰 This change saved the client over €1000 monthly in Azure Log Analytic costs. The euros won\u0026rsquo;t tell you how much of the total it was. After fixing all duplicate configurations, the total costs of the Application Insights resources were reduced by roughly 40-50%. If you also are experiencing this problem, I hope this article helps. Good logging makes all developers happy.\nWrap up Whenever you see duplicate logging in your application insights make sure the configuration is correct. Also, make sure that you\u0026rsquo;re not forcing a policy on the diagnostic settings when you configure it in the properties. Only one upstream to the Log Analytic workspace is required 😉.\nReferences Microsoft Learn - Application Insights Duplicate Telemetry Converting table ApplicationInsights LogAnalytics Azure Monitor ","permalink":"https://martdegraaf.github.io/posts/duplicate-logging-azure-application-insights/","summary":"Save troubles and money fixing duplicate logging in your Azure Application Insights, and Log Analytics Workspace.","title":"Duplicate Logging Azure Application Insights"},{"content":"Introduction For a recent project, I wanted to add a property to the consuming applications from within my NuGet package. This prevents making a pull request for every consuming application with a .csproj change.\n📓 Please note in this example the NuGet package has the ID: MyProject.ExampleNuGet, so replace that value for your nuget package. The consuming application is MyProject.ConsumingWebApi. NuGet file structure MyProject.ExampleNuGet (Repository level) ┣ MyProject.ExampleNuGet ┃ ┣ Extensions ┃ ┃ ┗ MySpecialThing.cs ┃ ┣ MyProject.ExampleNuGet.csproj ┃ ┗ MyProject.ExampleNuGet.props ┣ MyProject.ExampleNuGet.sln ┗ nuget.configMyProject.ExampleNuGet.props The NuGet package has a .props-file to enforce some properties to the consumers.\n\u0026lt;Project\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;!-- Enable output XML Docs for Swagger. --\u0026gt; \u0026lt;GenerateDocumentationFile\u0026gt;true\u0026lt;/GenerateDocumentationFile\u0026gt; \u0026lt;!-- Disable missing XML comment warnings. --\u0026gt; \u0026lt;NoWarn\u0026gt;$(NoWarn);1591\u0026lt;/NoWarn\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;/Project\u0026gt;MyProject.ExampleNuGet.csproj Important is to set the build action of the MyProject.ExampleNuGet.props file to package it to the build directory. See the example below:\n\u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net6.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;None Update=\u0026#34;MyProject.ExampleNuGet.props\u0026#34; Pack=\u0026#34;true\u0026#34; PackagePath=\u0026#34;build\u0026#34;\u0026gt; \u0026lt;/None\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt;Conclusion When installing this package on for example MyProject.ConsumingWebApi a file is generated in de build folder MyProject.ConsumingWebApi.csproj.nuget.g.targets. This ensures the setting is on when building MyProject.ConsumingWebApi.\nReferences I used the following resources to fix my problem.\nhttps://stackoverflow.com/questions/67263924/create-nuget-containing-shared-project-properties-automatic-references https://learn.microsoft.com/en-us/nuget/concepts/msbuild-props-and-targets#packagereference-projects ","permalink":"https://martdegraaf.github.io/posts/add-properties-for-consuming-apps-to-a-nuget-package/","summary":"This article explains how to add consuming project properties to a NuGet package. Those project properties will be used in the consuming apps.","title":"Add project properties for consuming apps to a NuGet package"},{"content":"Introduction For a recent project, I wanted to create a test that verified that LogError was called. Consider for example this piece of code below. The catch operation was added to swallow the exception of the delete action. We want to test this behavior but still would like to know if the LogError is being called.\nThe system under test public async Task Delete(long sequenceNumber) { _logger.LogInformation(\u0026#34;Deleting `{sequenceNumber}`.\u0026#34;, sequenceNumber); try { await _client.Delete(..); _logger.LogInformation(\u0026#34;Delete completed `{sequenceNumber}`.\u0026#34;, sequenceNumber); } catch (InvalidOperationException ex) when (ex.Message.Equals($\u0026#34;The scheduled message with SequenceNumber = {sequenceNumber} is already being cancelled.\u0026#34;)) { _logger.LogError(ex, \u0026#34;Already cancelled {sequenceNumber}.\u0026#34;, sequenceNumber); } }Verify that LogError is called Have you ever tried to verify your LogError using xUnit? It does not seem to work out of the box as other FakeItEasy. I tried this code for example, but it just would not work. The mock that throws the exception has been left out to keep the code sample small.\n//Arrange var logger = A.Fake\u0026lt;ILogger\u0026lt;SystemUnderTest\u0026gt;\u0026gt;(); var sut = new SystemUnderTest(logger); //Act await sut.Delete(1); //Assert A.CallTo(() =\u0026gt; logger.LogError(A\u0026lt;string\u0026gt;.Ignored, A\u0026lt;object[]\u0026gt;.Ignored)) .MustHaveHappenedOnceExactly();The LoggerExtensions class The solution was right at hand because my coworker had already figured it out. Thanks, Marnix. Chekout his blog: Marnix\u0026rsquo; blog. Use the extension class as described below.\n//Arrange var logger = A.Fake\u0026lt;ILogger\u0026lt;SystemUnderTest\u0026gt;\u0026gt;(); var sut = new SystemUnderTest(logger); //Act await sut.Delete(1); //Assert logger.VerifyLogged(LogLevel.Information, \u0026#34;Deleting 1\u0026#34;); logger.VerifyLogged(LogLevel.Error, \u0026#34;Already cancelled 1\u0026#34;);LoggerExtensions.cs using FakeItEasy; using Microsoft.Extensions.Logging; using System; using System.Linq; using Xunit.Sdk; namespace SomeCoolNamespace; public static class LoggerExtensions { public static void VerifyLogged\u0026lt;T\u0026gt;(this ILogger\u0026lt;T\u0026gt; logger, LogLevel level, string logMessage) { var (found, actualLevel, actualMessage) = logger.VerifyLog(logMessage); if (!found) { throw new XunitException($\u0026#34;No log message found containing \u0026#39;{logMessage}\u0026#39; at any loglevel\u0026#34;); } if (actualLevel != level) { throw new AssertActualExpectedException( $\u0026#34;[{level}] {logMessage}\u0026#34;, $\u0026#34;[{actualLevel}] {actualMessage}\u0026#34;, $\u0026#34;Unexpected log level for log message\u0026#34;); } } public static void VerifyNotLogged\u0026lt;T\u0026gt;(this ILogger\u0026lt;T\u0026gt; logger, LogLevel level, string logMessage) { var (found, actualLevel, actualMessage) = logger.VerifyLog(logMessage); if (found \u0026amp;\u0026amp; actualLevel == level) { throw new XunitException( @$\u0026#34;Log message found containing \u0026#39;{logMessage}\u0026#39; at level {level}{Environment.NewLine}Message: {actualMessage}\u0026#34;); } } public static void VerifyNotLoggedAtLevel\u0026lt;T\u0026gt;(this ILogger\u0026lt;T\u0026gt; logger, LogLevel level) { var call = Fake.GetCalls(logger) .FirstOrDefault(call =\u0026gt; (LogLevel?)call.Arguments[0] == level); if (call != null) { throw new XunitException( @$\u0026#34;Log message found at level {level}{Environment.NewLine} Message: {call.Arguments[2]}\u0026#34;); } } public static void VerifyLoggedAtLevel\u0026lt;T\u0026gt;(this ILogger\u0026lt;T\u0026gt; logger, LogLevel level) { var found = Fake.GetCalls(logger) .Any(call =\u0026gt; (LogLevel?)call.Arguments[0] == level); if (found) { throw new XunitException($\u0026#34;No log message found at level {level}\u0026#34;); } } private static (bool found, LogLevel? level, string? message) VerifyLog\u0026lt;T\u0026gt;(this ILogger\u0026lt;T\u0026gt; logger, string message) { var call = Fake.GetCalls(logger) .FirstOrDefault(call =\u0026gt; call.Arguments[2].ToString() .Contains(message, StringComparison.OrdinalIgnoreCase)); return (call != null, (LogLevel?)call?.Arguments[0], call?.Arguments[2].ToString()); } }Conclusion Using this class you will be able to test your logging with Xunit and FakeItEasy.\n","permalink":"https://martdegraaf.github.io/posts/verifylogged-with-xunit/","summary":"Explains how to test LogError with Xunit.","title":"How to verify that ILogger logged an error?"},{"content":" Mart de Graaf is a hardworking software geek sharing his ideas, solutions, and hobbies. He is enthusiastic about .NET solutions, Azure DevOps, and Azure solutions. Mart is working for 4Dotnet, a consulting company in the Netherlands. At home, he is a father to his four children.\nCore values If you ask some of my previous coworkers, what defines Mart? They will tell you that I\u0026rsquo;m a determined and hardworking person. I will prove in my blog that it\u0026rsquo;s true. One of the things I wanted for this blog is to show in my blog are Mermaid diagrams. I used for example a Gantt chart and a mindmap to share my ideas. Press the moon or sun icon in the menu to switch from light to dark or vice versa and see that the mermaid theme will also change. Pro tip: use Alt + T to switch themes. But as you can see I did not yet fix the certification part as the title has the same color as the background.\nSpeaking Sharing makes me so happy that I try to share my knowledge through speaking. See how I planned for that using some lessons I learned from the book: Eat that frog.\nCertifications Here are some of my active certifications I am very proud of:\n","permalink":"https://martdegraaf.github.io/about/","summary":"Mart de Graaf is a hardworking software geek sharing his ideas, solutions, and hobbies. He is enthusiastic about .NET solutions, Azure DevOps, and Azure solutions. Mart is working for 4Dotnet, a consulting company in the Netherlands. At home, he is a father to his four children.\nCore values If you ask some of my previous coworkers, what defines Mart? They will tell you that I\u0026rsquo;m a determined and hardworking person.","title":"About Mart"},{"content":"I am a seasoned speaker passionate about sharing knowledge with the tech community. I\u0026rsquo;ve spoken at various events and specialize in topics like Git, cloud software observability, and the optimization of daily work for software engineers. If you are interested in having me as a speaker at your event, please reach out!\nUpcoming engagements 7 September 2023 - Azure Platform Engineering meetup - Git 16 November 2023 - 4Dotnet\u0026rsquo;s Move up Current sessions For bookings, feel free to contact me directly or via Sessionize. Here are the sessions that I can deliver on short notice:\nAdvanced git and git workflows - A deep dive into advanced Git concepts and workflows to streamline your version control processes. Observability of your cloud Software - Application Insights deep dive - Learn how to monitor, debug, and control your cloud-based software with Microsoft\u0026rsquo;s Application Insights. Improve your daily work using habits for Software Engineers (New) - Boost your productivity by integrating these proven habits into your daily routine as a software engineer. Previous engagements Here are some of the events where I had the privilege to share my knowledge:\n4 April 2023 - DevCampNoord. 4 November 2022 - DotNetFriday (Recording) 29 September 2022 - DevNetNoord (The Revival) 17 October 2019 - NoorderTest 29 November 2018 - Young Sogetist of the Year 2018 Finale - Recording available upon request Looking forward to engaging with you at the next tech event!\n","permalink":"https://martdegraaf.github.io/speaking/","summary":"I am a seasoned speaker passionate about sharing knowledge with the tech community. I\u0026rsquo;ve spoken at various events and specialize in topics like Git, cloud software observability, and the optimization of daily work for software engineers. If you are interested in having me as a speaker at your event, please reach out!\nUpcoming engagements 7 September 2023 - Azure Platform Engineering meetup - Git 16 November 2023 - 4Dotnet\u0026rsquo;s Move up Current sessions For bookings, feel free to contact me directly or via Sessionize.","title":"Speaking engagements"}]